{{!--
/*
 * Your installation or use of this SugarCRM file is subject to the applicable
 * terms available at
 * http://support.sugarcrm.com/06_Customer_Center/10_Master_Subscription_Agreements/.
 * If you do not agree to all of the applicable terms or do not have the
 * authority to bind the entity as an authorized representative, then do not
 * install or use this SugarCRM file.
 *
 * Copyright (C) SugarCRM Inc. All rights reserved.
 */
--}}
    <section id="implementation">

      <div class="page-header">
        <h2>Chart Implementation <small>Patterns for inserting and configuring charts.</small></h2>
      </div>

      <div class="row-fluid">

        <div class="span7">
          <h3>Simple Chart Instance</h3>
          <p>Creating new chart using default parameters and setting data model.</p>
<pre class="prettyprint linenums">
  &lt;div id="chart1"&gt;
    &lt;svg>&lt;/svg&gt;
  &lt;/div&gt;
  var chart = nv.models.multiBarChart();

  d3.select('#chart1 svg')
    .datum(forecast_data_Q1)
    .transition().duration(500).call(chart);
</pre>

          <h3>Overriding Base Event Handlers</h3>
          <p>Default chart handlers (if defined in chart class) can be overridden by passing a function on instantiation.</p>
<pre class="prettyprint linenums">
  var chart = nv.models.multiBarChart()
                .barClick( function(data,e,selection) {
                    d3.select('#chart1 svg')
                      .datum(forecast_data_Q2)
                      .transition().duration(500).call(chart);
                  }
                );
</pre>

          <h3>Setting Parameters</h3>
          <p>Chart parameters can be set by calling public getter/setter functions.</p>

<pre class="prettyprint linenums">
  var chart = nv.models.multiBarChart()
                .x(function(d) { return d.label })
                .y(function(d) { return d.value })
                .margin({top: 0, right: 0, bottom: 15, left: 90})
                .showValues(true)
                .tooltips(true)
                .showControls(false);
</pre>

          <h3>Instantiating Chart</h3>
          <p>A chart can be instantiated with generate and callback functions using NVD3 addGraph function.</p>
<pre class="prettyprint linenums">
    nv.addGraph({
      generate: function() {
          var chart = nv.models.multiBarChart();

          d3.select('#chart1 svg')
            .datum(forecast_data_Q1)
            .transition().duration(500).call(chart);

          nv.utils.windowResize(chart.update);

          return chart;
      },
      callback: function(graph) {
        $('#log').text('Chart is loaded');
      }
    });
</pre>
        </div> <!-- end col -->


        <div class="span5">

          <h3>Standard Parameters</h3>
          <p>This is a set of common chart parameters.</p>
          <div>
<table class="table table-bordered table-striped">
  <thead>
   <tr>
     <th style="width: 100px;">Name</th>
     <th style="width: 50px;">type</th>
     <th style="width: 50px;">default</th>
     <th>description</th>
   </tr>
  </thead>
  <tbody>
   <tr>
     <td>margin</td>
     <td>map</td>
     <td>varies</td>
     <td><code>{top: 20, right: 10, bottom: 40, left: 40}</code></td>
   </tr>
   <tr>
     <td>width | height</td>
     <td>numeric</td>
     <td>null</td>
     <td>set fixed width; null sets chart to expand to containing div</td>
   </tr>
   <tr>
     <td>getX | getY</td>
     <td>function</td>
     <td><code>function(d) { return d.x }</code></td>
     <td>how to get to the x,y property in the datum</td>
   </tr>
   <tr>
     <td>color</td>
     <td>function</td>
     <td><code>nv.utils.defaultColor()</code></td>
     <td>call to function to return color map</td>
   </tr>
   <tr>
     <td>showControls</td>
     <td>boolean</td>
     <td>false</td>
     <td>show chart controls if any</td>
   </tr>
   <tr>
     <td>showLegend</td>
     <td>boolean</td>
     <td>true</td>
     <td>show chart legend</td>
   </tr>
   <tr>
     <td>reduceXTicks | reduceYTicks</td>
     <td>boolean</td>
     <td>true</td>
     <td>if false a tick will show for every data point</td>
   </tr>
   <tr>
     <td>rotateLabels</td>
     <td>boolean</td>
     <td>false</td>
     <td>angle to rotate axis labels</td>
   </tr>
   <tr>
     <td>tooltips</td>
     <td>boolean</td>
     <td>true</td>
     <td>show tooltips over charting elements</td>
   </tr>
   <tr>
     <td>tooltip</td>
     <td>function</td>
     <td><code><pre>function(key, x, y, e, graph) {
  return '&lt;h3&gt;' + key + ' - ' + x + '&lt;/h3&gt;' + '&lt;p&gt;' +  y + '&lt;/p&gt;'
}</pre></code></td>
     <td>function that returns an html formated string</td>
   </tr>
   <tr>
     <td>strings</td>
     <td>map</td>
     <td><code><pre>{
  legend: {close: 'Hide legend', open: 'Show legend'},
  controls: {close: 'Hide controls', open: 'Show controls'},
  noData: 'No Data Available.'
}</pre></code></td>
     <td>message to display when no data is available</td>
   </tr>
   <tr>
     <td>hideEmptyGroups</td>
     <td>boolean</td>
     <td>true</td>
     <td>collapse multibar group when group total is zero</td>
   </tr>
  </tbody>
</table>
          </div>
        </div> <!-- end col -->

      </div> <!-- end row -->

      <div class="row-fluid">
        <div class="span12">

          <h3>Binding Chart Data with Backbone</h3>
          <p>A chart can be bound to a common data model using Backbone.</p>
<pre class="prettyprint linenums">
  var Chart = Backbone.Model.extend({});
  var Charts = Backbone.Collection.extend({ model: Chart });
  charts = new Charts();
  charts.reset(forecast_data_Q1);

  // The chart view controls the single svg element on the screen
  var ChartsView = Backbone.View.extend({

    initialize: function() {
      // bind to model change events and use enter() to modify the appropriate circle
      var self = this;

      self.collection.bind(
        'reset',
        function(model)
        {
          d3.select(self.el)
            .datum( model.models.map( function(d,i){return d.attributes} ) )
            .transition().duration(500).call(self.chart);
        }
      );
    },

    render: function() {
      this.$el.empty();

      this.chart = nv.models.multiBarChart();

      d3.select(this.el)
        .datum( this.collection.models.map( function(d,i){return d.attributes} ) )
        .transition().duration(500).call(this.chart);

      nv.utils.windowResize(this.chart.update);

      return this;
    }

  });

  var chartsView = new ChartsView({ el: $('#chart1 svg'), collection: charts });
  chartsView.render();

  setTimeout(function() { charts.reset( forecast_data_Q2 ); },3000);
</pre>

        </div>
      </div>
    </section>

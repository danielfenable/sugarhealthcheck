{{!--
/*
 * Your installation or use of this SugarCRM file is subject to the applicable
 * terms available at
 * http://support.sugarcrm.com/06_Customer_Center/10_Master_Subscription_Agreements/.
 * If you do not agree to all of the applicable terms or do not have the
 * authority to bind the entity as an authorized representative, then do not
 * install or use this SugarCRM file.
 *
 * Copyright (C) SugarCRM Inc. All rights reserved.
 */
--}}
<style>
  .nv-chart {
    height: 280px;
  }
</style>

<section id="colors">

  <div class="page-header">
    <h2>Defining Chart Colors <small>Flexible methods for assigning color maps and fill methods to D3 charts.</small></h2>
  </div>

  <div class="row-fluid">

    <div class="span6">
      <h3>Standard Chart Colors</h3>
      <p>Using standard D3 chart colors is the default (Option 1 data).</p>
      <div id="gauge1" class="nv-chart">
        <svg></svg>
      </div>
<pre class="prettyprint linenums">
  var gauge = nv.models.gaugeChart()
      .colorData( 'default' );

  d3.select("#gauge1 svg")
    .datum(gauge_data_1)
    .call(gauge);
</pre>
    </div>

    <div class="span6">
      <h3>Standard Chart Colors with Gradient Fill</h3>
      <p>It is possible to fill the chart shapes with a gradient using the active color palette.</p>
      <div id="gauge2" class="nv-chart">
        <svg></svg>
      </div>
<pre class="prettyprint linenums">
  var gauge = nv.models.gaugeChart()
        .colorData( 'default', {gradient:true} );

  d3.select("#gauge2 svg")
    .datum(gauge_data_1)
    .call(gauge);
</pre>
    </div>

  </div>

  <div class="row-fluid">

    <div class="span6">
      <h3>Data-Defined Chart Colors</h3>
      <p>If colors are defined in the data, they are used instead of D3 colors (Option 2 data).</p>
      <div id="gauge3" class="nv-chart">
        <svg></svg>
      </div>
<pre class="prettyprint linenums">
  var gauge = nv.models.gaugeChart()
      .colorData( 'default' );

  d3.select("#gauge3 svg")
    .datum(gauge_data_2)
    .call(gauge);
</pre>
    </div>

    <div class="span6">
      <h3>Data-Defined Chart Colors with Gradient Fill</h3>
      <p>It is possible to fill the chart shapes with a gradient using a graduated color palette.</p>
      <div id="gauge4" class="nv-chart">
        <svg></svg>
      </div>
<pre class="prettyprint linenums">
  var gauge = nv.models.gaugeChart()
        .colorData( 'default', {gradient:true} );

  d3.select("#gauge4 svg")
    .datum(gauge_data_2)
    .call(gauge);
</pre>
    </div>

  </div>

  <div class="row-fluid">

    <div class="span6">
      <h3>Graduated Palette Chart Colors</h3>
      <p>It is also possible to use a graduated palette (any data option).</p>
      <div id="gauge5" class="nv-chart">
        <svg></svg>
      </div>
<pre class="prettyprint linenums">
  var gauge = nv.models.gaugeChart()
      .colorData( 'graduated', {c1: '#e8e2ca', c2: '#3e6c0a', l: gauge_data.data.length} );

  d3.select("#gauge5 svg")
    .datum(gauge_data_1)
    .call(gauge);
</pre>
    </div>

    <div class="span6">
      <h3>Graduated Palette Chart Colors with Gradient Fill</h3>
      <p>It is possible to fill the chart shapes with a gradient using a graduated color palette.</p>
      <div id="gauge6" class="nv-chart">
        <svg></svg>
      </div>
<pre class="prettyprint linenums">
  var gauge = nv.models.gaugeChart()
      .colorData( 'graduated', {c1: '#e8e2ca', c2: '#3e6c0a', l: gauge_data.data.length, gradient:true} );

  d3.select("#gauge6 svg")
    .datum(gauge_data_1)
    .call(gauge);
</pre>
    </div>

  </div>

  <div class="row-fluid">

    <div class="span6">
      <h3>CSS Class Chart Colors</h3>
      <p>Chart colors can be defined using classes. The default classes in themes). If classes are not defined in data, they are assigned sequentially.</p>
      <div id="gauge7" class="nv-chart">
        <svg></svg>
      </div>
<pre class="prettyprint linenums">
  var gauge = nv.models.gaugeChart()
      .colorData( 'class' );

  d3.select("#gauge7 svg")
    .datum(gauge_data_1)
    .call(gauge);
</pre>
    </div>

    <div class="span6">
      <h3>Data-Defined Chart Classes</h3>
      <p>It is possible to specify which chart class to use for use for a data series in the chart data (Option 3 data).</p>
      <div id="gauge8" class="nv-chart">
        <svg></svg>
      </div>
<pre class="prettyprint linenums">
  var gauge = nv.models.gaugeChart()
      .colorData( 'class', {gradient:true} );

  d3.select("#gauge8 svg")
    .datum(gauge_data_3)
    .call(gauge);
</pre>
    </div>

  </div>
      <div class="alert alert-info">
        <strong>Data-Defined Chart Classes with Gradient Fill</strong> It is possible to define gradient fills with CSS but requires use of SVG resource files <code>.nv-fill-gradient { fill: 'url(./custom_gradient.svg)'; }</code>; however, they are not currently supported by the theming engine.
      </div>
</section>


<section id="colors">
  <div class="page-header">
    <h2>Example Chart Data Options <small>Options for setting chart color styles.</small></h2>
    <p>Color classes and RGB hex values can be embedded in the chart data. Depending on the colorData setting, they may or may not be used.</p>
  </div>
  <div class="row-fluid">

    <div class="span4">
      <h3>Option 1: Default Chart Data</h3>
      <p>A basic data definition for charts will use the standard D3 colors.</p>
<pre class="prettyprint linenums">
    var gauge_data_1 = {
      'properties': {
        'title': 'Closed Won Opportunities Gauge',
        'value': 4
      },
      'data': [
        {
          key: "Range 1"
          , y: 3
        },
        {
          key: "Range 2"
          , y: 5
        },
        {
          key: "Range 3"
          , y: 7
        },
        {
          key: "Range 4"
          , y: 9
        }
      ]
    };
</pre>
    </div>

    <div class="span4">
      <h3>Option 2: Data-Defined Colors</h3>
      <p>If colors are defined in the data, they are used instead of D3 colors.</p>
<pre class="prettyprint linenums">
    var gauge_data_2 = {
      'properties': {
        'title': 'Closed Won Opportunities Gauge',
        'value': 4
      },
      'data': [
        {
          key: "Range 1"
          , y: 3
          , color: "#d62728"
        },
        {
          key: "Range 2"
          , y: 5
          , color: "#ff7f0e"
        },
        {
          key: "Range 3"
          , y: 7
          , color: "#bcbd22"
        },
        {
          key: "Range 4"
          , y: 9
          , color: "#2ca02c"
        }
      ]
    };
</pre>
    </div>

    <div class="span4">
      <h3>Option 3: Data-Defined Classes</h3>
      <p>If classes are defined in the data, they are used to set the style properties.</p>
<pre class="prettyprint linenums">
    var gauge_data_3 = {
      'properties': {
        'title': 'Closed Won Opportunities Gauge',
        'value': 4
      },
      'data': [
        {
          key: "Range 1"
          , y: 3
          , class: "nv-fill07"
        },
        {
          key: "Range 2"
          , y: 5
          , class: "nv-fill03"
        },
        {
          key: "Range 3"
          , y: 7
          , class: "nv-fill17"
        },
        {
          key: "Range 4"
          , y: 9
          , class: "nv-fill05"
        }
      ]
    };
</pre>
    </div>

  </div>

</section>


<section id="colors">
  <div class="page-header">
    <h2>Sugar7 Accent Color Classes for Charts</h2>
    <p>A description of the standard D3 categorical color scales is in <a href="https://github.com/mbostock/d3/wiki/Ordinal-Scales">D3 documentation</a>. New color scales can be generated using Cynthia Brewer's <a href="http://colorbrewer2.org/">ColorBrewer</a>.</p>
  </div>
  <div class="row-fluid">
    <div class="span12">
      <h3>Fill and Stroke</h3>
      <p>A progressive rainbow of colors.</p>
      <div>
<table class="table table-bordered table-striped">
          <tr>
            <td><code>@mint => @nv-fill00, @nv-stroke00</code></td>
            <td><code>.nv-fill00, .nv-stroke00</code></td>
            <td class="hex mono">#0d8046</td>
            <td class="swatch-col"><span class="swatch mint"></span></td>
          </tr>
          <tr>
            <td><code>@green => @nv-fill01, @nv-stroke01</code></td>
            <td><code>.nv-fill01, .nv-stroke01</code></td>
            <td class="hex mono">#33800d</td>
            <td><span class="swatch green"></span></td>
          </tr>
          <tr>
            <td><code>@army => @nv-fill02, @nv-stroke02</code></td>
            <td><code>.nv-fill02, .nv-stroke02</code></td>
            <td class="hex mono">#6a800d</td>
            <td><span class="swatch army"></span></td>
          </tr>
          <tr>
            <td><code>@yellow => @nv-fill03, @nv-stroke03</code></td>
            <td><code>.nv-fill03, .nv-stroke03</code></td>
            <td class="hex mono">#e5a117</td>
            <td><span class="swatch yellow"></span></td>
          </tr>
          <tr>
            <td><code>@orange => @nv-fill04, @nv-stroke04</code></td>
            <td><code>.nv-fill04, .nv-stroke04</code></td>
            <td class="hex mono">#cc3314</td>
            <td><span class="swatch orange"></span></td>
          </tr>
          <tr>
            <td><code>@red => @nv-fill05, @nv-stroke05</code></td>
            <td><code>.nv-fill05, .nv-stroke05</code></td>
            <td class="hex mono">#e61718</td>
            <td><span class="swatch red"></span></td>
          </tr>
          <tr>
            <td><code>@pink => @nv-fill06, @nv-stroke06</code></td>
            <td><code>.nv-fill06, .nv-stroke06</code></td>
            <td class="hex mono">#e5176d</td>
            <td><span class="swatch pink"></span></td>
          </tr>
          <tr>
            <td><code>@purple => @nv-fill07, @nv-stroke07</code></td>
            <td><code>.nv-fill07, .nv-stroke07</code></td>
            <td class="hex mono">#6d17e5</td>
            <td><span class="swatch purple"></span></td>
          </tr>
          <tr>
            <td><code>@night => @nv-fill08, @nv-stroke08</code></td>
            <td><code>.nv-fill08, .nv-stroke08</code></td>
            <td class="hex mono">#1f12b3</td>
            <td><span class="swatch night"></span></td>
          </tr>
          <tr>
            <td><code>@blue => @nv-fill09, @nv-stroke09</code></td>
            <td><code>.nv-fill09, .nv-stroke09</code></td>
            <td class="hex mono">#176de5</td>
            <td><span class="swatch blue"></span></td>
          </tr>
          <tr>
            <td><code>@ocean => @nv-fill10, @nv-stroke10</code></td>
            <td><code>.nv-fill10, .nv-stroke10</code></td>
            <td class="hex mono">#1378bf</td>
            <td><span class="swatch ocean"></span></td>
          </tr>
          <tr>
            <td><code>@pacific => @nv-fill11, @nv-stroke11</code></td>
            <td><code>.nv-fill11, .nv-stroke11</code></td>
            <td class="hex mono">#0f7799</td>
            <td><span class="swatch pacific"></span></td>
          </tr>
          <tr>
            <td><code>@teal => @nv-fill12, @nv-stroke12</code></td>
            <td><code>.nv-fill12, .nv-stroke12</code></td>
            <td class="hex mono">#0d806c</td>
            <td><span class="swatch teal"></span></td>
          </tr>
          <tr>
            <td><code>@coral => @nv-fill13, @nv-stroke13</code></td>
            <td><code>.nv-fill13, .nv-stroke13</code></td>
            <td class="hex mono">#ff6fcf</td>
            <td><span class="swatch coral"></span></td>
          </tr>
</table>
      </div>
    </div>


    {{!-- <div class="span6">
      <h3>Creating New Chart Color Themes</h3>

      <div class="alert alert-info">
        <p>New chart color themes are created in the <code>/styleguide/themes/clients/base</code> directory. Copy the <code>/default</code> folder and rename. Inside this folder, edit the variables.less file. In the CHART section, edit the @fillXX and @strokeXX LESS variables as needed. Then go to the Bootstrap Builder at <a href="../build/">/styleguide/build/</a>, choose your new theme folder and click the "Compile" button. Your new chart color theme will be available.</p>
        <p>Your new chart color theme will be visible in the charts on this page. To enable the use of chart color CSS classes, set the <code>.colorData( 'class' )</code> property in your chart definition (see example above). Custom SVG gradient fills in CSS are not supported.</p>
      </div>
    </div> --}}
  </div>
</section>

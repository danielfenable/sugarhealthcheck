/*
     * Your installation or use of this SugarCRM file is subject to the applicable
     * terms available at
     * http://support.sugarcrm.com/06_Customer_Center/10_Master_Subscription_Agreements/.
     * If you do not agree to all of the applicable terms or do not have the
     * authority to bind the entity as an authorized representative, then do not
     * install or use this SugarCRM file.
     *
     * Copyright (C) SugarCRM Inc. All rights reserved.
     */
({events:{'click [data-action=add]':'addRow','click [data-action=remove]':'removeRow','change [data-filter=field] input[type=hidden]':'handleFieldSelected','change [data-filter=operator] input[type=hidden]':'handleOperatorSelected'},className:'filter-definition-container',filterFields:[],lastFilterDef:[],fieldTypeMap:{'datetime':'date','datetimecombo':'date'},initialize:function(opts){this.formRowTemplate=app.template.get("filter-rows.filter-row-partial");var operators=app.metadata.getFilterOperators();if(_.isEmpty(operators)){app.logger.error('Filter operators not found.');operators={};}
this.filterOperatorMap=operators;app.view.View.prototype.initialize.call(this,opts);this.listenTo(this.layout,"filterpanel:change:module",this.handleFilterChange);this.listenTo(this.layout,"filter:create:open",this.openForm);this.listenTo(this.layout,"filter:create:close",this.render);this.listenTo(this.context,"filter:create:save",this.saveFilter);this.listenTo(this.layout,"filter:create:delete",this.confirmDelete);},handleFilterChange:function(moduleName){var moduleMeta=app.metadata.getModule(moduleName);if(!moduleMeta){return;}
this.fieldList=app.data.getBeanClass('Filters').prototype.getFilterableFields(moduleName);this.filterFields={};this.moduleName=moduleName;_.each(this.fieldList,function(value,key){this.filterFields[key]=app.lang.get(value.vname,moduleName);},this);},openForm:_.debounce(function(filterModel){var template=filterModel.get('filter_template')||filterModel.get('filter_definition');if(_.isEmpty(template)){this.render();this.addRow();}else{this.populateFilter();}
this.saveFilterEditState();app.shortcuts.register('Filter:Add','+',function(){this.$('[data-action=add]').last().click();},this);app.shortcuts.register('Filter:Remove','-',function(){this.$('[data-action=remove]').last().click();},this);},100,true),saveFilter:function(name){var self=this,obj={filter_definition:this.buildFilterDef(true),filter_template:this.buildFilterDef(),name:name||this.context.editingFilter.get('name'),module_name:this.moduleName},message=app.lang.get('TPL_FILTER_SAVE',this.moduleName,{name:name});this.context.editingFilter.save(obj,{success:function(model){self.context.trigger('filter:add',model);self.layout.trigger('filter:toggle:savestate',false);},showAlerts:{'success':{title:app.lang.get('LBL_SUCCESS'),messages:message}}});},confirmDelete:function(){app.alert.show('delete_confirmation',{level:'confirmation',messages:app.lang.get('LBL_DELETE_FILTER_CONFIRMATION',this.moduleName),onConfirm:_.bind(this.deleteFilter,this)});},deleteFilter:function(){var self=this,name=this.context.editingFilter.get('name'),message=app.lang.get('TPL_DELETE_FILTER_SUCCESS',this.moduleName,{name:name});this.context.editingFilter.destroy({success:function(model){self.layout.trigger('filter:remove',model);},showAlerts:{'success':{title:app.lang.get('LBL_SUCCESS'),messages:message}}});this.layout.trigger('filter:create:close');},getFilterableFields:function(moduleName){var moduleMeta=app.metadata.getModule(moduleName),fieldMeta=moduleMeta.fields,fields={};if(moduleMeta.filters){_.each(moduleMeta.filters,function(templateMeta){if(templateMeta.meta&&templateMeta.meta.fields){fields=_.extend(fields,templateMeta.meta.fields);}});}
_.each(fields,function(fieldFilterDef,fieldName){var fieldMetaData=app.utils.deepCopy(fieldMeta[fieldName]);if(_.isEmpty(fieldFilterDef)){fields[fieldName]=fieldMetaData||{};}else{fields[fieldName]=_.extend({name:fieldName},fieldMetaData,fieldFilterDef);}
delete fields[fieldName]['readonly'];});return fields;},createField:function(model,def){var obj={meta:{view:"edit"},def:def,model:model,context:app.controller.context,viewName:"edit",view:this};var field=app.view.createField(obj);field.action='detail';return field;},addRow:function(e){var $row;if(e){$row=this.$(e.currentTarget).closest('[data-filter=row]');$row.after(this.formRowTemplate());$row=$row.next();this.layout.trigger('filter:toggle:savestate',true);}
return this.initRow($row);},initRow:function($row,data){$row=$row||$(this.formRowTemplate()).appendTo(this.$el);data=data||{};var model,field,$fieldValue,$fieldContainer;$row.data('name',data.name);$row.data('operator',data.operator);$row.data('value',data.value);model=app.data.createBean(this.moduleName);if(data.name){model.set('filter_row_name',data.name);}
field=this.createField(model,{name:'filter_row_name',type:'enum',options:this.filterFields});$fieldValue=$row.find('[data-filter=field]');$fieldContainer=$(field.getPlaceholder().string);$fieldContainer.appendTo($fieldValue);$row.data('nameField',field);this._renderField(field,$fieldContainer);if(data.name){this.initOperatorField($row);}
return $row;},removeRow:function(e){var $row=this.$(e.currentTarget).closest('[data-filter=row]'),fieldOpts=[{'field':'nameField','value':'name'},{'field':'operatorField','value':'operator'},{'field':'valueField','value':'value'}];this._disposeRowFields($row,fieldOpts);$row.remove();this.layout.trigger('filter:toggle:savestate',true);if(this.$('[data-filter=row]').length===0){this.addRow();}},validateRows:function(rows){return _.every(rows,this.validateRow,this);},validateRow:function(row){var $row=$(row),data=$row.data();if(data.isDateRange||data.isPredefinedFilter){return true;}else if(data.isFlexRelate){return data.value?_.reduce(data.value,function(memo,val){return memo&&!_.isEmpty(val);},true):false;}
if(_.contains(['$between','$dateBetween'],data.operator)){if(!_.isArray(data.value)||data.value.length!==2){return false;}
switch(data.operator){case'$between':return!(_.isNaN(parseFloat(data.value[0]))||_.isNaN(parseFloat(data.value[1])));case'$dateBetween':return!_.isEmpty(data.value[0])&&!_.isEmpty(data.value[1]);default:return false;}}
return _.isNumber(data.value)||!_.isEmpty(data.value);},populateFilter:function(){var name=this.context.editingFilter.get('name'),filterOptions=this.context.get('filterOptions')||{},populate=this.context.editingFilter.get('is_template')&&filterOptions.filter_populate,filterDef=this.context.editingFilter.get('filter_template')||this.context.editingFilter.get('filter_definition');this.render();this.layout.trigger('filter:set:name',name);if(populate){filterDef=app.data.getBeanClass('Filters').prototype.populateFilterDefinition(filterDef,populate);}
_.each(filterDef,function(row){this.populateRow(row);},this);this.lastFilterDef=this.buildFilterDef(true);this.lastFilterTemplate=this.buildFilterDef();},populateRow:function(rowObj){var moduleMeta=app.metadata.getModule(this.layout.currentModule);var fieldMeta=moduleMeta.fields;_.each(rowObj,function(value,key){var isPredefinedFilter=(this.fieldList[key]&&this.fieldList[key].predefined_filter===true);if(key==='$or'){var keys=_.reduce(value,function(memo,obj){return memo.concat(_.keys(obj));},[]);key=_.find(_.keys(this.fieldList),function(key){if(_.has(this.fieldList[key],'dbFields')){return _.isEqual(this.fieldList[key].dbFields.sort(),keys.sort());}},this);value=_.values(value[0])[0];}else if(key==='$and'){var values=_.reduce(value,function(memo,obj){return _.extend(memo,obj);},{}),def=_.find(this.fieldList,function(fieldDef){return _.has(values,fieldDef.id_name);},this);key=def?def.name:key;value={'$equals':values};}else if(!fieldMeta[key]&&!isPredefinedFilter){return;}
if(!this.fieldList[key]){var relate=_.find(this.fieldList,function(field){return field.id_name===key;});if(!relate){return;}
key=relate.name;}
if(_.isString(value)||_.isNumber(value)){value={'$equals':value};}
_.each(value,function(value,operator){this.initRow(null,{name:key,operator:operator,value:value});},this);},this);},handleFieldSelected:function(e){var $el=this.$(e.currentTarget);var $row=$el.parents('[data-filter=row]');var fieldOpts=[{'field':'operatorField','value':'operator'},{'field':'valueField','value':'value'}];this._disposeRowFields($row,fieldOpts);this.initOperatorField($row);},initOperatorField:function($row){var $fieldWrapper=$row.find('[data-filter=operator]');var data=$row.data();var fieldName=data.nameField.model.get('filter_row_name');var previousOperator=data.operator;data['name']=fieldName;if(!fieldName){return;}
data.id_name=this.fieldList[fieldName].id_name;data.type_name=this.fieldList[fieldName].type_name;if(this.fieldList[fieldName].predefined_filter===true){data.isPredefinedFilter=true;this.fireSearch();return;}
var fieldType=this.fieldTypeMap[this.fieldList[fieldName].type]||this.fieldList[fieldName].type,payload={},types=_.keys(this.filterOperatorMap[fieldType]);if(fieldType==='parent'&&_.isEqual(types,['$equals'])){previousOperator=data.operator=types[0];}
fieldType==='parent'?$fieldWrapper.addClass('hide').empty():$fieldWrapper.removeClass('hide').empty();$row.find('[data-filter=value]').addClass('hide').empty();_.each(types,function(operand){payload[operand]=app.lang.get(this.filterOperatorMap[fieldType][operand],[this.layout.moduleName,'Filters']);},this);var model=app.data.createBean(this.moduleName);if(previousOperator){model.set('filter_row_operator',data.operator==='$dateRange'?data.value:data.operator);}
var field=this.createField(model,{name:'filter_row_operator',type:'enum',searchBarThreshold:9999,options:payload}),$field=$(field.getPlaceholder().string);$field.appendTo($fieldWrapper);data['operatorField']=field;this._renderField(field,$field);var hide=fieldType==='parent';this._hideOperator(hide,$row);if(previousOperator){this.initValueField($row);}},_hideOperator:function(hide,$row){$row.find('[data-filter=value]').toggleClass('span4',!hide).toggleClass('span8',hide);},handleOperatorSelected:function(e){var $el=this.$(e.currentTarget);var $row=$el.parents('[data-filter=row]');var fieldOpts=[{'field':'valueField','value':'value'}];this._disposeRowFields($row,fieldOpts);this.initValueField($row);},initValueField:function($row){var data=$row.data();var operation=data.operatorField.model.get('filter_row_operator');data.operator=operation;if(!operation){return;}
var moduleName=this.moduleName,module=app.metadata.getModule(moduleName),fields=app.metadata._patchFields(moduleName,module,app.utils.deepCopy(this.fieldList));var fieldName=$row.find('[data-filter=field] input[type=hidden]').select2('val'),fieldType=this.fieldTypeMap[this.fieldList[fieldName].type]||this.fieldList[fieldName].type,fieldDef=fields[fieldName];switch(fieldType){case'enum':fieldDef.isMultiSelect=true;fieldDef.searchBarThreshold=-1;break;case'bool':fieldDef.type='enum';fieldDef.options=fieldDef.options||'filter_checkbox_dom';break;case'int':fieldDef.auto_increment=false;if(operation==='$in'){fieldDef.type='varchar';fieldDef.len=200;if(_.isArray($row.data('value'))){$row.data('value',$row.data('value').join(','));}}
break;case'teamset':fieldDef.type='relate';break;case'datetimecombo':case'date':fieldDef.type='date';data.isDate=true;if(operation.charAt(0)!=='$'){data.isDateRange=true;this.fireSearch();return;}
break;case'relate':fieldDef.auto_populate=true;break;case'parent':data.isFlexRelate=true;break;}
fieldDef.required=false;fieldDef.readonly=false;var model=app.data.createBean(moduleName);var $fieldValue=$row.find('[data-filter=value]');$fieldValue.removeClass('hide').empty();var _keyUpCallback=function(e){if($(e.currentTarget).is(".select2-input")){return;}
this.value=$(e.currentTarget).val();model.set(this.name,this.unformat($(e.currentTarget).val()),{silent:true});model.trigger('change');};if(operation==='$between'||operation==='$dateBetween'){var minmax=[],value=$row.data('value')||[];model.set(fieldName+'_min',value[0]||'');model.set(fieldName+'_max',value[1]||'');minmax.push(this.createField(model,_.extend({},fieldDef,{name:fieldName+'_min'})));minmax.push(this.createField(model,_.extend({},fieldDef,{name:fieldName+'_max'})));if(operation==='$dateBetween'){minmax[0].label=app.lang.get('LBL_FILTER_DATEBETWEEN_FROM');minmax[1].label=app.lang.get('LBL_FILTER_DATEBETWEEN_TO');}else{minmax[0].label=app.lang.get('LBL_FILTER_BETWEEN_FROM');minmax[1].label=app.lang.get('LBL_FILTER_BETWEEN_TO');}
data['valueField']=minmax;_.each(minmax,function(field){var fieldContainer=$(field.getPlaceholder().string);$fieldValue.append(fieldContainer);this.listenTo(field,'render',function(){field.$('input, select, textarea').addClass('inherit-width');field.$('.input-append').prepend('<span class="add-on">'+field.label+'</span>');field.$('.input-append').addClass('input-prepend');field.$('.input-append').removeClass('date');field.$('input, textarea').on('keyup',_.debounce(_.bind(_keyUpCallback,field),400));});this._renderField(field,fieldContainer);},this);}else if(data.isFlexRelate){_.each($row.data('value'),function(value,key){model.set(key,value);},this);var field=this.createField(model,_.extend({},fieldDef,{name:fieldName})),fieldContainer=$(field.getPlaceholder().string),findRelatedName=app.data.createBeanCollection(model.get('parent_type'));data['valueField']=field;$fieldValue.append(fieldContainer);if(model.get('parent_id')){findRelatedName.fetch({params:{filter:[{'id':model.get('parent_id')}]},complete:_.bind(function(){if(!this.disposed){if(findRelatedName.first()){model.set(fieldName,findRelatedName.first().get(field.getRelatedModuleField()),{silent:true});}
if(!field.disposed){this._renderField(field,fieldContainer);}}},this)});}else{this._renderField(field,fieldContainer);}}else{model.set(fieldDef.id_name||fieldName,$row.data('value'));var field=this.createField(model,_.extend({},fieldDef,{name:fieldName})),fieldContainer=$(field.getPlaceholder().string);$fieldValue.append(fieldContainer);data['valueField']=field;this.listenTo(field,'render',function(){field.$('input, select, textarea').addClass('inherit-width');field.$('.input-append').removeClass('date');field.$('input, textarea').on('keyup',_.debounce(_.bind(_keyUpCallback,field),400));});if(fieldDef.type==='relate'&&$row.data('value')){var self=this,findRelatedName=app.data.createBeanCollection(fieldDef.module);findRelatedName.fetch({fields:[fieldDef.rname],params:{filter:[{'id':$row.data('value')}]},complete:function(){if(!self.disposed){if(findRelatedName.first()){model.set(fieldName,findRelatedName.first().get(fieldDef.rname),{silent:true});}
if(!field.disposed){self._renderField(field,fieldContainer);}}}});}else{this._renderField(field,fieldContainer);}}
this.listenTo(model,"change",function(){this._updateFilterData($row);this.fireSearch();});var modelValue=model.get(fieldDef.id_name||fieldName);if(!_.isEmpty(modelValue)&&modelValue!==$row.data('value')){model.trigger('change');}},_updateFilterData:function($row){var data=$row.data(),field=data['valueField'],name=data['name'],valueForFilter;if(this.fieldList[name]&&this.fieldList[name].id_name){name=this.fieldList[name].id_name;}
if(_.isArray(field)){valueForFilter=[];_.each(field,function(field){var value=!field.disposed&&field.model.has(field.name)?field.model.get(field.name):'';value=$row.data('isDate')?(app.date.stripIsoTimeDelimterAndTZ(value)||''):value;valueForFilter.push(value);});}else{var value=!field.disposed&&field.model.has(name)?field.model.get(name):'';valueForFilter=$row.data('isDate')?(app.date.stripIsoTimeDelimterAndTZ(value)||''):value;}
$row.data("value",valueForFilter);},fireSearch:_.debounce(function(){var filterDef=this.buildFilterDef(true),filterTemplate=this.buildFilterDef(),defHasChanged=!_.isEqual(this.lastFilterDef,filterDef),templateHasChanged=!_.isEqual(this.lastFilterTemplate,filterTemplate);if(defHasChanged||templateHasChanged){this.saveFilterEditState(filterDef,filterTemplate);this.lastFilterDef=filterDef;this.lastFilterTemplate=filterTemplate;this.layout.trigger('filter:toggle:savestate',true);}
if(!defHasChanged){return;}
if(this.context.get('applyFilter')!==false){this.layout.trigger('filter:apply',null,filterDef);}},400),saveFilterEditState:function(filterDef,templateDef){if(!this.context.editingFilter){return;}
this.context.editingFilter.set({'filter_definition':filterDef||this.buildFilterDef(true),'filter_template':templateDef||this.buildFilterDef()});var filter=this.context.editingFilter.toJSON();if(this.layout.getComponent('filter-actions')&&this.layout.getComponent('filter-actions').$('input').length===1){filter.name=this.layout.getComponent('filter-actions').getFilterName();}
this.layout.getComponent('filter').saveFilterEditState(filter);},buildFilterDef:function(onlyValidRows){var $rows=this.$('[data-filter=row]'),filter=[];_.each($rows,function(row){var rowFilter=this.buildRowFilterDef($(row),onlyValidRows);if(rowFilter){filter.push(rowFilter);}},this);return filter;},buildRowFilterDef:function($row,onlyIfValid){var data=$row.data();if(onlyIfValid&&!this.validateRow($row)){return;}
var operator=data['operator'],value=data['value']||'',name=data['id_name']||data['name'],filter={};if(_.isEmpty(name)){return;}
if(data.isPredefinedFilter||!this.fieldList){filter[name]='';return filter;}else{if(this.fieldList[name]&&_.has(this.fieldList[name],'dbFields')){var subfilters=[];_.each(this.fieldList[name].dbFields,function(dbField){var filter={};filter[dbField]={};filter[dbField][operator]=value;subfilters.push(filter);});filter['$or']=subfilters;}else{if(data.isFlexRelate){var valueField=data['valueField'],idFilter={},typeFilter={};idFilter[data.id_name]=valueField.model.get(data.id_name);typeFilter[data.type_name]=valueField.model.get(data.type_name);filter['$and']=[idFilter,typeFilter];}else if(operator==='$equals'){filter[name]=value;}else if(data.isDateRange){filter[name]={};filter[name].$dateRange=operator;}else if(operator==='$in'||operator==='$not_in'){filter[name]={};if(_.isArray(value)){filter[name][operator]=value;}else if(!_.isEmpty(value)){filter[name][operator]=(value+'').split(',');}else{filter[name][operator]=[];}}else{filter[name]={};filter[name][operator]=value;}}
return filter;}},resetFilterValues:function(){var $rows=this.$('[data-filter=row]');_.each($rows,function(row){var $row=$(row);var valueField=$row.data('valueField');if(!valueField||valueField.disposed){return;}
if(!_.isArray(valueField)){valueField.model.clear();return;}
_.each(valueField,function(field){field.model.clear();});});},_disposeRowFields:function($row,opts){var data=$row.data(),model;if(_.isObject(data)&&_.isArray(opts)){_.each(opts,function(val){if(data[val.field]){var fields=_.isArray(data[val.field])?data[val.field]:[data[val.field]];data[val.value]='';_.each(fields,function(field){model=field.model;if(val.field==="valueField"&&model){model.clear({silent:true});this.stopListening(model);}
field.dispose();field=null;},this);return;}
if(data.isDateRange&&val.value==='value'){data.value='';}},this);}
data.isDate=false;data.isDateRange=false;data.isPredefinedFilter=false;data.isFlexRelate=false;$row.data(data);this.fireSearch();}})